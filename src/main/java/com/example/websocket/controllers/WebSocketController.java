package com.example.websocket.controllers;

import com.example.websocket.models.ChatMessage;
import com.example.websocket.models.Message;
import com.example.websocket.models.Response;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

@Controller
@Slf4j
public class WebSocketController {
    // You cannot integrate WebSocket with JWT for token validate.
    private static final String token = "this is a token generated by your code!";
    private final SimpMessagingTemplate simpMessagingTemplate;

    public WebSocketController(SimpMessagingTemplate simpMessagingTemplate) {
        this.simpMessagingTemplate = simpMessagingTemplate;
    }

    /**
     * <code>@MessageMapping</code> defines the endpoint for receiving messages, client will send websocket message
     * to endpoints defined in this annotation.
     * <code>@SendTo</code> defines the return value's target endpoint of this method, clients which subscribe to
     * this endpoint will receive the return value of this method.
     * This method will simply send messages received to all clients that subscribe to endpoint specified in
     * <code>@SendTo</code>, just like a broadcast
     *
     * <code>@MessageMapping</code> Define the endpoint that receives the message, and the client sends WebSocket messages to this endpoint.
     * <code>@SendTo</code> Define the endpoint for sending the return value of the method, and the client that subscribes to the endpoint can receive the reply from the server.
     * This endpoint sends received messages to all subscribed by default <code>@SendTo</code> The client of the endpoint is equivalent to broadcasting.
     *
     * @param message            client message
     * @param authorizationToken customize header, for token validate
     * @return return client message to all clients that subscribe to <code>/b</code>
     */
    //
    @MessageMapping("/broadcast")
    @SendTo("/b")
    public Response broadcast(Message message, @Header(value = "authorization") String authorizationToken) {
        val response = new Response("Token check failed!");
        if (authorizationToken.equals(token)) {
            log.info("Token check success!!!");
            response.setResponse("Welcome, " + message.getName() + "!");
        } else {
            log.info(response.getResponse());
        }
        return response;
    }

    /**
     * Add a placeholder in <code>@MessageMapping</code> to get the dynamic param in websocket url, for dynamic
     * resending. Message sent to this endpoint will be resent to any clients that subscribe endpoint {@code /g/<groupId>}.
     * Just like a group chat.
     * <p>
     * Pass in <code>@MessageMapping</code> Add message placeholders to get the url content and forward it dynamically.
     * The message will be sent to all subscribed {@code /g/<groupId>} Client, the effect is equivalent to group chat
     *
     * @param groupID group id
     * @param message client message
     */
    @MessageMapping("/group/{groupID}")
    public void group(@DestinationVariable int groupID, Message message) {
        log.info("Receive group message: [" + groupID + " -> " + message.getName() + "]");
        Response response = new Response("Welcome to group " + groupID + ", " + message.getName() + "!");
        simpMessagingTemplate.convertAndSend("/g/" + groupID, response);
    }

    /**
     * Send message to specify user depend on {@link ChatMessage#getUserID}, each user will subscribe himself/herself's endpoint
     * {@code /user/<userId>/msg}, just like point to point chat.
     * <p>
     * in accordance with {@code ChatMessage} The content in Send messages to specific users, and each user subscribes to their own endpoint to receive messages
     * {@code /user/<userId>/msg}ï¼ŒThe effect is similar to point-to-point chat
     *
     * @param chatMessage Chat message
     */
    @MessageMapping("/chat")
    public void chat(ChatMessage chatMessage) {
        log.info("Receive point-to-point chat message: [" + chatMessage.getFromUserID() + " -> " + chatMessage.getUserID() + ", " + chatMessage.getMessage() + "]");
        Response response = new Response("Receive message from user " + chatMessage.getFromUserID() + ": " + chatMessage.getMessage());
        simpMessagingTemplate.convertAndSendToUser(String.valueOf(chatMessage.getUserID()), "/msg", response);
    }
}
